brute force approach by set........................................
Time Complexity: O(m*log(m) + n*log(n)), where ‘m’ and ‘n’ are the size of the arrays
Auxiliary Space: O(m + n)

class Union{
static ArrayList<Integer> findUnion(int arr1[] ,int arr2[] , int n , int m){

Hashset<Integer> s = new Hashset<>();
ArrayList < Integer > Union=new ArrayList<>()
for(int i=0;i<n;i++){
s.add(arr1[i])
}
for(int i=0;i<m;i++){
s.add(arr2[i])
}
for (int it: s)
    Union.add(it);
  return Union;
}
public static void main(String args[]) {
  int n = 10, m = 7;
  int arr1[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
  int arr2[] = {2, 3, 4, 4, 5, 11, 12};
  ArrayList<Integer> Union = FindUnion(arr1, arr2, n, m);
  System.out.println("Union of arr1 and arr2 is ");
  for (int val: Union)
    System.out.print(val+" ");

}

}


optimal approach by two pointer.........................

Time Complexity : O(m + n)
Auxiliary Space: O(1)

static int findUnion(int arr1[], int arr2[] , int m , int n){

int i=0 ,j=0;
while(i<m && j<n){
if(arr1[i]<arr2[j])
 System.out.print(arr1[i++] + " ");
else if(arr2[j]<arr1[i])
System.out.print(arr2[j++] + " ");
else{
    System.out.print(arr2[j++] + " ");
    i++;
}

// put remaining elements

while(i<m)
System.out.print(arr1[i++] + " ");
while (j < n)
System.out.print(arr2[j++] + " ");
 return 0;
   
}



